import logging
import pendulum
from airflow.decorators import dag, task
from airflow.providers.postgres.operators.postgres import PostgresOperator

from airflow.providers.postgres.hooks.postgres import PostgresHook

log = logging.getLogger(__name__)


def source_data():
    conn_id = 'PG_ORIGIN_BONUS_SYSTEM_CONNECTION'
    postgres_hook = PostgresHook(conn_id)                          
    conn_source = postgres_hook.get_conn()
    cursor_source = conn_source.cursor()
    cursor_source.execute(''' 
                            select *
                            from public.ranks
                                        ''')
                
    data = cursor_source.fetchall()
    f = []
    for s_val in range(len(data)):
        f.append([int(str(data[s_val][0])),str(data[s_val][1]),float(str(data[s_val][2])),float(str(data[s_val][3]))])
    cursor_source.close()

    return f

data = source_data()


@dag(
    schedule_interval='0/15 * * * *',
    start_date=pendulum.datetime(2022, 7, 20, tz="UTC"),
    catchup=False,
    tags=['sprint5', 'example'],
    is_paused_upon_creation=False
)
def Insert_data():
    pr = str([tuple(i) for i in data ])[1:-1]
    Insert_data = PostgresOperator(
        task_id='Insert_data',
        postgres_conn_id='PG_WAREHOUSE_CONNECTION',
        sql='''insert into stg.bonussystem_ranks 
                VALUES %s
                on conflict (id)
                do update set "name" = EXCLUDED."name",
                bonus_percent = EXCLUDED.bonus_percent,
                min_payment_threshold = EXCLUDED.min_payment_threshold;'''% (pr)
    )
    Insert_data
Insert_data = Insert_data()

